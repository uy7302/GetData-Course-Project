means
}
columnmean(airquality)
wd()
getwd()
chwd()
changewd()
getwd()
columnmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmean(y)
path2csv = "C:/Users/uy7302/Desktop/R/Assignment#1/specdata/001.csv
""
""
path2csv = "C:/Users/uy7302/Desktop/R/Assignment#1/specdata/001.csv"
y<- read.csv(path2csv, header=TRUE)
y<- read.csv(path2csv)
y
columnmean(y)
columnmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmean(y)
y
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[ ,i],na.rm=removeNA)
}
means
}
columnmean(y)
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
nc
y
nc<-ncol(y)
nc
means<-numeric(nc)
means
columnmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],trim=0)
}
means
}
columnmean(y)
y
mean(y[,i])
i
i<-1
mean(y[,i])
y
mean(y[,i])
mean(y[,1])
mean(y[[,1]])
mean(y[[ ,1]])
mean(y[ ,1])
mean(y[1])
y
y[1,1]
y[,1]
y[,2]
y[,3]
y[,4]
y[,5]
y[,1]
y[,i]
means
class(means)
mean(y[1])
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm==removeNA)
}
means
}
columnmean(y)
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
columnmean<-function(y,removeNA=T){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
nc
class(y)
y<-numeric(y)
numeric(y)
columnmean<-function(y,removeNA=T){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean<-function(y,removeNA=T){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
columnmean<-function(y,removeNA=F){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
columnmean<-function(y,removeNA=T){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
y
columnmean<-function(y,removeNA=T){
nc<-ncol(y)
means<-numeric(nc)
for(i in 2:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
columnmean<-function(y,removeNA=T){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(y)
find.package("devtools")
install.packages("devtools")
find.package("rtools")
find_rtools()
library(devtool)
library(devtools)
find_rtools()
find_rtools()
find.package("rtools")
find.package("devtools")
find_rtools()
find_rtools()
library(devtools)
swirl()
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-(z/my_sqrt)
info()
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
?list.files()
list.files()
file.exists("mytest.R)
file.exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R"","mytest2.R"")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path(folder1,folder2)
file.path('folder1','folder2')
?dir.create
?dir.create
dir.create("testdir2",recursive=T,file.path("testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2",recursive=T)
unlink("testdir2",recursive=TRUE)
setwd("old.dir"")
setwd("old.dir")
setwd(old.dir)
ls()
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?":"
seq(1, 20)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
exit
swirl()
install.packages("swirl")
library(swirl)
swirl
swirl()
install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.1")
install.packages("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
library(sqldf)
install.packages("sqldf")
library(sqldf)
swirl()
install.packages("swirl")
library(swirl)
swirl()
install.packages("swirl")
library(swirl)
swirl()
q()
z <- rep(NA,1000
y <- rnorm(1000)
my_data <- sample(c(y, z), 100)
y <- rnorm(1000)
z <- rep(NA,1000
)
my_data <- sample(c(y, z), 100)
head(my_data)
head(my_data,10)
q()
library("plyr", lib.loc="~/R/win-library/3.1")
download.packages("dplyr")
install.packages("dplyr")
source('C:/Users/uy7302/Desktop/run_analysis.R')
source('C:/Users/uy7302/Desktop/cachematrix.R')
source('~/GitHub/March/Getting & Cleaning Data/GetData-Course-Project/run_analysis.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/Getting & Cleaning Data/GetData-Course-Project/run_analysis.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
inverseMatrix <- solve(data, ...)                         # Calulate the inverse of the matrix using "solve" function in the current environment
makeCacheMatrix()
makeCacheMatrix(x)
makeCacheMatrix()
cacheSolve()
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
x <- matrix(9,nrows=3)
x <- matrix(9,nrow=3)
x
x <- matrix(1:9,nrow=3)
x
x <- matrix(1:9,nrow=2)
x <- matrix(1:9,nrow=1)
x
x <- matrix(1:81,nrow=9)
x
x <- matrix(1:100,nrow=10)
x
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
makeCacheMtrix(x)
makeCacheMatrix(x)
inversematrix
x
inverseMatrix
inverseMatrix <- NULL
##
##
##
set <- function(y) {                                      # <- assign to the current environment
x <<- y                                                 # <<- rebind to the parent of the current environment.
inverseMatrix <<- NULL                                  # environment set to parent (inverseMatrix == NULL) for "makeCacheMatrix"
}
get <- function() x                                       # Create a function called 'get' from makeCacheMatrix and assign it matrix 'x'
setInverse <- function(solve) inverseMatrix <<- solve     # Take the value of "solve" and set it to the environment of inversematrix
getInverse <- function() inverserMatrix                   # Returns the value for 'inverseMatrix' from its environment
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)                             # Retrive/push the inverse from/to cache
}
##_________________________________________________________
## cacheSolve: This function computes the inverse of the
## matrix returned by makeCacheMatrix above if the inverse
## has already been calculated. If not, it computes it.
##_________________________________________________________
##
cacheSolve <- function(x, ...) {
inverseMatrix <- x$getInverse()                           # Get the inverseMatrix from the inverseMatrix environment
if(!is.null(inverseMatrix)) {                             # Return inverse of the matrix
message("getting cached data")                          # display the corresponding message
return(inverserMatrix)                                  # return the inverse of the matrix
}
data <- x$get()                                           # Assigns "x" matrix to data if "x" has not been evaluated before (inverseMatrix == NULL)
inverseMatrix <- solve(data, ...)                         # Calulate the inverse of the matrix using "solve" function in the current environment
x$setInverse(inverseMatrix)                               # Assign the inverse to the "x" environment via setInverse
inverseMatrix                                             # Displays the inverse
)
x
inverseMatrix
debug(makCacheMatrix)
debug(makeCacheMatrix)
makeCacheMatrix(x)
inverseMatrix
inverseMatrix
inverseMatrix
get
x
get
makeCacheMatrix(x)
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
debug(makeCacheMatrix)
makeCacheMatrix(x)
set
get
solve
setInverse
getInverse
getInverse
x
getInverse
setInverse
x
inverseMatrix
source('C:/Users/uy7302/Desktop/R Backups/cachematrix_test.R')
x <-1:20
x
undebug(cachematrix)
undebug(cachematrix_test)
debug(cachematrix_test)
debug(cacheMatrix_test)
debug(cachematrix_test)
source('C:/Users/uy7302/Desktop/R Backups/cachematrix_test.R')
debug(cachematrix_test)
source('C:/Users/uy7302/Desktop/R Backups/cachematrix_test.R')
debug(cachematrix_test)
makevector(x)
makeVector(x)
x
m
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
##--------------------------------------------------------------------------
## Calculates the mean of the special "vector" created with the makeVector
## function. It checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the
## mean in the cache via the setmean function.
##--------------------------------------------------------------------------
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
##--------------------------------------------------------------------------
## Calculates the mean of the special "vector" created with the makeVector
## function. It checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the
## mean in the cache via the setmean function.
##--------------------------------------------------------------------------
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
source('C:/Users/uy7302/Desktop/R Backups/cachemean.R')
source('C:/Users/uy7302/Desktop/R Backups/cachemean.R')
cachemean(x)
cachemean(x)
mean
getmean
setmean
getmean
m
set
get
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/uy7302/Desktop/R/cachematrix.R')
source('~/GitHub/March/R-Programming/Assignment#2/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
run_analysis()
source('~/GitHub/March/Getting & Cleaning Data/Course-Project/GetData-Course-Project/run_analysis.R')
run_analysis()
